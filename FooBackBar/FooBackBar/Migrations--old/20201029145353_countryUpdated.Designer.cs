// <auto-generated />
using System;
using FooBackBar.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FooBackBar.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20201029145353_countryUpdated")]
    partial class countryUpdated
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9");

            modelBuilder.Entity("FooBackBar.Models.CaseHistory", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GuidCountry")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GuidStatus")
                        .HasColumnType("TEXT");

                    b.HasKey("Guid");

                    b.HasIndex("GuidCountry");

                    b.HasIndex("GuidStatus");

                    b.ToTable("CaseHistories");
                });

            modelBuilder.Entity("FooBackBar.Models.Coordinates", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GuidCountry")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("TEXT");

                    b.HasKey("Guid");

                    b.HasIndex("GuidCountry")
                        .IsUnique();

                    b.ToTable("Coordinates");
                });

            modelBuilder.Entity("FooBackBar.Models.Country", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Total")
                        .HasColumnType("INTEGER");

                    b.HasKey("Guid");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("FooBackBar.Models.CountryStatus", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GuidCountry")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GuidStatus")
                        .HasColumnType("TEXT");

                    b.Property<int>("Total")
                        .HasColumnType("INTEGER");

                    b.HasKey("Guid");

                    b.HasIndex("GuidCountry");

                    b.HasIndex("GuidStatus");

                    b.ToTable("CountryStatus");
                });

            modelBuilder.Entity("FooBackBar.Models.Status", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeath")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRecovered")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Total")
                        .HasColumnType("INTEGER");

                    b.HasKey("Guid");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            Guid = new Guid("cce27126-5d6b-4cf1-bc1d-714168130497"),
                            IsConfirmed = true,
                            IsDeath = false,
                            IsRecovered = false,
                            Total = 0
                        },
                        new
                        {
                            Guid = new Guid("480c5c8f-1a6f-4200-97a2-b6a69acdc28c"),
                            IsConfirmed = false,
                            IsDeath = true,
                            IsRecovered = false,
                            Total = 0
                        },
                        new
                        {
                            Guid = new Guid("166412c3-6775-49e7-90e2-1ba8d7b9ed25"),
                            IsConfirmed = false,
                            IsDeath = false,
                            IsRecovered = true,
                            Total = 0
                        });
                });

            modelBuilder.Entity("FooBackBar.Models.CaseHistory", b =>
                {
                    b.HasOne("FooBackBar.Models.Country", "Country")
                        .WithMany("History")
                        .HasForeignKey("GuidCountry")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FooBackBar.Models.Status", "Status")
                        .WithMany("CaseHistories")
                        .HasForeignKey("GuidStatus")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FooBackBar.Models.Coordinates", b =>
                {
                    b.HasOne("FooBackBar.Models.Country", "Country")
                        .WithOne("Coordinates")
                        .HasForeignKey("FooBackBar.Models.Coordinates", "GuidCountry")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FooBackBar.Models.CountryStatus", b =>
                {
                    b.HasOne("FooBackBar.Models.Country", "Country")
                        .WithMany("CountryStatus")
                        .HasForeignKey("GuidCountry")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FooBackBar.Models.Status", "Status")
                        .WithMany("CountryStatus")
                        .HasForeignKey("GuidStatus")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
